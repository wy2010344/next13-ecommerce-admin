// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ECommerceStore {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards EcommerceBillboard[] @relation("StoreToBillboard")
  categories EcommerceCategory[]  @relation("StoreToCategory")
  sizes      EcommerceSize[]      @relation("StoreToSize")
  colors     EcommerceColor[]     @relation("StoreToColor")

  products EcommerceProduct[] @relation("StoreToProduct")
  orders   EcommerceOrder[]   @relation("StoreToOrder")
}

model EcommerceBillboard {
  id        String         @id @default(uuid())
  storeId   String
  store     ECommerceStore @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  cateogries EcommerceCategory[]

  @@index([storeId])
}

model EcommerceCategory {
  id          String             @id @default(uuid())
  storeId     String
  store       ECommerceStore     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   EcommerceBillboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  products EcommerceProduct[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model EcommerceSize {
  id        String         @id @default(uuid())
  storeId   String
  store     ECommerceStore @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  products EcommerceProduct[]

  @@index([storeId])
}

model EcommerceColor {
  id        String         @id @default(uuid())
  storeId   String
  store     ECommerceStore @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  products EcommerceProduct[]

  @@index([storeId])
}

model EcommerceProduct {
  id         String            @id @default(uuid())
  storeId    String
  store      ECommerceStore    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   EcommerceCategory @relation("CategoryToProduct", fields: [categoryId], references: [id])

  name       String
  price      Decimal
  isFeatured Boolean        @default(false)
  isArchived Boolean        @default(false)
  sizeId     String
  size       EcommerceSize  @relation(fields: [sizeId], references: [id])
  colorId    String
  color      EcommerceColor @relation(fields: [colorId], references: [id])

  images EcommerceImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EcommerceOrderItem EcommerceOrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model EcommerceImage {
  id        String           @id @default(uuid())
  productId String
  product   EcommerceProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model EcommerceOrder {
  id         String               @id @default(uuid())
  storeId    String
  store      ECommerceStore       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems EcommerceOrderItem[]
  isPaid     Boolean              @default(false)
  phone      String               @default("")
  address    String               @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model EcommerceOrderItem {
  id        String           @id @default(uuid())
  orderId   String
  order     EcommerceOrder   @relation(fields: [orderId], references: [id])
  productId String
  product   EcommerceProduct @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
